# [PackageDev] target_format: plist, ext: tmLanguage
name: Bash Automated Testing System (bats)
scopeName: source.shell.bats
fileTypes: [bats]
uuid: D001D6FC-04A3-4BB6-9588-A6BCE46DDEDB

patterns:
- include: '#comment'

- include: '#pipeline'

- include: '#list'

- include: '#compound-command'

- include: '#loop'

- include: '#function-definition'

- include: '#string'

- include: '#variable'

- include: '#interpolation'

- include: '#heredoc'

- include: '#herestring'

- include: '#redirection'

- include: '#pathname'

- include: '#keyword'

- include: '#support'

repository:
  comment:
    patterns:
    - name: comment.line.number-sign.bats
      match: (?<!\S)(#)(?!\{).*$
      captures:
        '1': {name: punctuation.definition.comment.bats}

  case-clause:
    patterns:
    - name: meta.scope.case-clause.bats
      begin: (?=\S)
      end: ;;
      endCaptures:
        '0': {name: punctuation.terminator.case-clause.bats}
      patterns:
      - name: meta.scope.case-pattern.bats
        begin: (\(|(?=\S))
        end: \)
        captures:
          '0': {name: punctuation.definition.case-pattern.bats}
        patterns:
        - name: punctuation.separator.pipe-sign.bats
          match: \|
        - include: '#string'
        - include: '#variable'
        - include: '#interpolation'
        - include: '#pathname'
      - name: meta.scope.case-clause-body.bats
        begin: (?<=\))
        end: (?=;;)
        patterns:
        - include: $self

  compound-command:
    patterns:
    - name: meta.scope.logical-expression.bats
      begin: (\[{1,2})
      end: (\]{1,2})
      captures:
        '1': {name: punctuation.definition.logical-expression.bats}
      patterns:
      - include: '#logical-expression'
      - include: $self
    - name: string.other.math.bats
      begin: (\({2})
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.bats}
      end: (\){2})
      endCaptures:
        '0': {name: punctuation.definition.string.end.bats}
      patterns:
      - include: '#math'
    - name: meta.scope.subshell.bats
      begin: (\()
      end: (\))
      captures:
        '1': {name: punctuation.definition.subshell.bats}
      patterns:
      - include: $self
    - name: meta.scope.group.bats
      begin: (?<=\s|^)(\{)(?=\s|$)
      end: (?<=^|;)\s*(\})
      captures:
        '1': {name: punctuation.definition.group.bats}
      patterns:
      - include: $self

  function-definition:
    patterns:
    - name: meta.function.bats
      begin: \b(function)\s+([^\s\\]+)(?:\s*(\(\)))?
      beginCaptures:
        '1': {name: storage.type.function.bats}
        '2': {name: entity.name.function.bats}
        '3': {name: punctuation.definition.arguments.bats}
      end: ;|&|$
      endCaptures:
        '0': {name: punctuation.definition.function.bats}
      patterns:
      - include: $self
    - name: meta.function.bats
      begin: \b([^\s\\=]+)\s*(\(\))
      beginCaptures:
        '1': {name: entity.name.function.bats}
        '2': {name: punctuation.definition.arguments.bats}
      end: ;|&|$
      endCaptures:
        '0': {name: punctuation.definition.function.bats}
      patterns:
      - include: $self

  heredoc:
    patterns:
    - name: string.unquoted.heredoc.no-indent.ruby.bats
      contentName: source.ruby.embedded.bats
      begin: (<<)-("|'|)(RUBY)\2
      beginCaptures:
        '1': {name: keyword.operator.heredoc.bats}
        '3': {name: keyword.control.heredoc-token.bats}
      end: ^\t*(RUBY)\b
      endCaptures:
        '1': {name: keyword.control.heredoc-token.bats}
      captures:
        '0': {name: punctuation.definition.string.bats}
      patterns:
      - include: source.ruby
    - name: string.unquoted.heredoc.ruby.bats
      contentName: source.ruby.embedded.bats
      begin: (<<)("|'|)(RUBY)\2
      beginCaptures:
        '1': {name: keyword.operator.heredoc.bats}
        '3': {name: keyword.control.heredoc-token.bats}
      end: ^(RUBY)\b
      endCaptures:
        '1': {name: keyword.control.heredoc-token.bats}
      captures:
        '0': {name: punctuation.definition.string.bats}
      patterns:
      - include: source.ruby
    - name: string.unquoted.heredoc.no-indent.python.bats
      contentName: source.python.embedded.bats
      begin: (<<)-("|'|)(PYTHON)\2
      beginCaptures:
        '1': {name: keyword.operator.heredoc.bats}
        '3': {name: keyword.control.heredoc-token.bats}
      end: ^\t*(PYTHON)\b
      endCaptures:
        '1': {name: keyword.control.heredoc-token.bats}
      captures:
        '0': {name: punctuation.definition.string.bats}
      patterns:
      - include: source.python
    - name: string.unquoted.heredoc.python.bats
      contentName: source.python.embedded.bats
      begin: (<<)("|'|)(PYTHON)\2
      beginCaptures:
        '1': {name: keyword.operator.heredoc.bats}
        '3': {name: keyword.control.heredoc-token.bats}
      end: ^(PYTHON)\b
      endCaptures:
        '1': {name: keyword.control.heredoc-token.bats}
      captures:
        '0': {name: punctuation.definition.string.bats}
      patterns:
      - include: source.python
    - name: string.unquoted.heredoc.no-indent.applescript.bats
      contentName: source.applescript.embedded.bats
      begin: (<<)-("|'|)(APPLESCRIPT)\2
      beginCaptures:
        '1': {name: keyword.operator.heredoc.bats}
        '3': {name: keyword.control.heredoc-token.bats}
      end: ^\t*(APPLESCRIPT)\b
      endCaptures:
        '1': {name: keyword.control.heredoc-token.bats}
      captures:
        '0': {name: punctuation.definition.string.bats}
      patterns:
      - include: source.applescript
    - name: string.unquoted.heredoc.applescript.bats
      contentName: source.applescript.embedded.bats
      begin: (<<)("|'|)(APPLESCRIPT)\2
      beginCaptures:
        '1': {name: keyword.operator.heredoc.bats}
        '3': {name: keyword.control.heredoc-token.bats}
      end: ^(APPLESCRIPT)\b
      endCaptures:
        '1': {name: keyword.control.heredoc-token.bats}
      captures:
        '0': {name: punctuation.definition.string.bats}
      patterns:
      - include: source.applescript
    - name: string.unquoted.heredoc.no-indent.html.bats
      contentName: text.html.embedded.bats
      begin: (<<)-("|'|)(HTML)\2
      beginCaptures:
        '1': {name: keyword.operator.heredoc.bats}
        '3': {name: keyword.control.heredoc-token.bats}
      end: ^\t*(HTML)\b
      endCaptures:
        '1': {name: keyword.control.heredoc-token.bats}
      captures:
        '0': {name: punctuation.definition.string.bats}
      patterns:
      - include: text.html.basic
    - name: string.unquoted.heredoc.html.bats
      contentName: text.html.embedded.bats
      begin: (<<)("|'|)(HTML)\2
      beginCaptures:
        '1': {name: keyword.operator.heredoc.bats}
        '3': {name: keyword.control.heredoc-token.bats}
      end: ^(HTML)\b
      endCaptures:
        '1': {name: keyword.control.heredoc-token.bats}
      captures:
        '0': {name: punctuation.definition.string.bats}
      patterns:
      - include: text.html.basic
    - name: string.unquoted.heredoc.no-indent.markdown.bats
      contentName: text.html.markdown.embedded.bats
      begin: (<<)-("|'|)(MARKDOWN)\2
      beginCaptures:
        '1': {name: keyword.operator.heredoc.bats}
        '3': {name: keyword.control.heredoc-token.bats}
      end: ^\t*(MARKDOWN)\b
      endCaptures:
        '1': {name: keyword.control.heredoc-token.bats}
      captures:
        '0': {name: punctuation.definition.string.bats}
      patterns:
      - include: text.html.markdown
    - name: string.unquoted.heredoc.markdown.bats
      contentName: text.html.markdown.embedded.bats
      begin: (<<)("|'|)(MARKDOWN)\2
      beginCaptures:
        '1': {name: keyword.operator.heredoc.bats}
        '3': {name: keyword.control.heredoc-token.bats}
      end: ^(MARKDOWN)\b
      endCaptures:
        '1': {name: keyword.control.heredoc-token.bats}
      captures:
        '0': {name: punctuation.definition.string.bats}
      patterns:
      - include: text.html.markdown
    - name: string.unquoted.heredoc.no-indent.textile.bats
      contentName: text.html.textile.embedded.bats
      begin: (<<)-("|'|)(TEXTILE)\2
      beginCaptures:
        '1': {name: keyword.operator.heredoc.bats}
        '3': {name: keyword.control.heredoc-token.bats}
      end: ^\t*(TEXTILE)\b
      endCaptures:
        '1': {name: keyword.control.heredoc-token.bats}
      captures:
        '0': {name: punctuation.definition.string.bats}
      patterns:
      - include: text.html.textile
    - name: string.unquoted.heredoc.textile.bats
      contentName: text.html.textile.embedded.bats
      begin: (<<)("|'|)(TEXTILE)\2
      beginCaptures:
        '1': {name: keyword.operator.heredoc.bats}
        '3': {name: keyword.control.heredoc-token.bats}
      end: ^(TEXTILE)\b
      endCaptures:
        '1': {name: keyword.control.heredoc-token.bats}
      captures:
        '0': {name: punctuation.definition.string.bats}
      patterns:
      - include: text.html.textile
    - name: string.unquoted.heredoc.no-indent.bats
      begin: (<<)-("|'|)\\?(\w+)\2
      beginCaptures:
        '1': {name: keyword.operator.heredoc.bats}
        '3': {name: keyword.control.heredoc-token.bats}
      end: ^\t*(\3)\b
      endCaptures:
        '1': {name: keyword.control.heredoc-token.bats}
      captures:
        '0': {name: punctuation.definition.string.bats}
    - name: string.unquoted.heredoc.bats
      begin: (<<)("|'|)\\?(\w+)\2
      beginCaptures:
        '1': {name: keyword.operator.heredoc.bats}
        '3': {name: keyword.control.heredoc-token.bats}
      end: ^(\3)\b
      endCaptures:
        '1': {name: keyword.control.heredoc-token.bats}
      captures:
        '0': {name: punctuation.definition.string.bats}

  herestring:
    patterns:
    - name: meta.herestring.bats
      match: (<<<)((')[^']*('))
      captures:
        '1': {name: keyword.operator.herestring.bats}
        '2': {name: string.quoted.single.herestring.bats}
        '3': {name: punctuation.definition.string.begin.bats}
        '4': {name: punctuation.definition.string.end.bats}
    - name: meta.herestring.bats
      match: (<<<)((")(\\("|\\)|[^"])*("))
      captures:
        '1': {name: keyword.operator.herestring.bats}
        '2': {name: string.quoted.double.herestring.bats}
        '3': {name: punctuation.definition.string.begin.bats}
        '6': {name: punctuation.definition.string.end.bats}
    - name: meta.herestring.bats
      match: (<<<)(([^\s\\]|\\.)+)
      captures:
        '1': {name: keyword.operator.herestring.bats}
        '2': {name: string.unquoted.herestring.bats}

  interpolation:
    patterns:
    - name: string.other.math.bats
      begin: \$\({2}
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.bats}
      end: \){2}
      endCaptures:
        '0': {name: punctuation.definition.string.end.bats}
      patterns:
      - include: '#math'
    - name: string.interpolated.backtick.bats
      begin: '`'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.bats}
      end: '`'
      endCaptures:
        '0': {name: punctuation.definition.string.end.bats}
      patterns:
      - name: constant.character.escape.bats
        match: \\[`\\$]
      - include: $self
    - name: string.interpolated.dollar.bats
      begin: \$\(
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.bats}
      end: \)
      endCaptures:
        '0': {name: punctuation.definition.string.end.bats}
      patterns:
      - include: $self

  keyword:
    patterns:
    - name: keyword.control.bats
      match: \b(?:if|then|else|elif|fi|for|in|do|done|select|case|continue|break|esac|while|until|return)\b
    - name: storage.modifier.bats
      match: (?<![-/])\b(?:export|declare|typeset|local|readonly)\b

  list:
    patterns:
    - name: keyword.operator.list.bats
      match: ;|&&|&|\|\|

  logical-expression:
    patterns:
    - comment: do we want a special rule for ( expr )?
      name: keyword.operator.logical.bats
      match: =[=~]?|!=?|<|>|&&|\|\|
    - name: keyword.operator.logical.bats
      match: (?<!\S)-(nt|ot|ef|eq|ne|l[te]|g[te]|[a-hknoprstuwxzOGLSN])

  loop:
    patterns:
    - name: meta.scope.for-loop.bats
      begin: \b(for)\s+(?=\({2})
      end: \b(done)\b
      captures:
        '1': {name: keyword.control.bats}
      patterns:
      - include: $self
    - name: meta.scope.for-in-loop.bats
      begin: \b(for)\s+((?:[^\s\\]|\\.)+)\b
      beginCaptures:
        '1': {name: keyword.control.bats}
        '2': {name: variable.other.loop.bats}
      end: \b(done)\b
      endCaptures:
        '1': {name: keyword.control.bats}
      patterns:
      - include: $self
    - name: meta.scope.while-loop.bats
      begin: \b(while|until)\b
      end: \b(done)\b
      captures:
        '1': {name: keyword.control.bats}
      patterns:
      - include: $self
    - name: meta.scope.select-block.bats
      begin: \b(select)\s+((?:[^\s\\]|\\.)+)\b
      beginCaptures:
        '1': {name: keyword.control.bats}
        '2': {name: variable.other.loop.bats}
      end: \b(done)\b
      endCaptures:
        '1': {name: keyword.control.bats}
      patterns:
      - include: $self
    - name: meta.scope.case-block.bats
      begin: \b(case)\b
      end: \b(esac)\b
      captures:
        '1': {name: keyword.control.bats}
      patterns:
      - name: meta.scope.case-body.bats
        begin: \b(in)\b
        beginCaptures:
          '1': {name: keyword.control.bats}
        end: (?=\b(?:esac)\b)
        patterns:
        - include: '#comment'
        - include: '#case-clause'
        - include: $self
      - include: $self
    - name: meta.scope.if-block.bats
      begin: \b(if)\b
      end: \b(fi)\b
      captures:
        '1': {name: keyword.control.bats}
      patterns:
      - include: $self

  math:
    patterns:
    - include: '#variable'
    - name: keyword.operator.arithmetic.bats
      match: \+{1,2}|-{1,2}|!|~|\*{1,2}|/|%|<[<=]?|>[>=]?|==|!=|^|\|{1,2}|&{1,2}|\?|\:|,|=|[*/%+\-&^|]=|<<=|>>=
    - name: constant.numeric.hex.bats
      match: 0[xX]\h+
    - name: constant.numeric.octal.bats
      match: 0\d+
    - name: constant.numeric.other.bats
      match: \d{1,2}#[0-9a-zA-Z@_]+
    - name: constant.numeric.integer.bats
      match: \d+

  pathname:
    patterns:
    - name: keyword.operator.assign.bats
      match: (?<=[a-zA-Z0-9_])=(?=\s*$|[^\s])
    - name: keyword.operator.tilde.bats
      match: (?<=\s|:|=|^)~
    - name: keyword.operator.glob.bats
      match: \*|\?
    - name: meta.structure.extglob.bats
      begin: ([?*+@!])(\()
      beginCaptures:
        '1': {name: keyword.operator.extglob.bats}
        '2': {name: punctuation.definition.extglob.bats}
      end: (\))
      endCaptures:
        '1': {name: punctuation.definition.extglob.bats}
      patterns:
      - include: $self

  pipeline:
    patterns:
    - name: keyword.other.bats
      match: \b(time)\b
    - name: keyword.operator.pipe.bats
      match: '[|!]'

  redirection:
    patterns:
    - name: string.interpolated.process-substitution.bats
      begin: '[><]\('
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.bats}
      end: \)
      endCaptures:
        '0': {name: punctuation.definition.string.end.bats}
      patterns:
      - include: $self
    - comment: 'valid: &>word >&word >word [n]>&[n] [n]<word [n]>word [n]>>word [n]<&word
        (last one is duplicate)'
      name: keyword.operator.redirect.bats
      match: '&>|\d*>&\d*|\d*(>>|>|<)|\d*<&|\d*<>'

  string:
    patterns:
    - name: constant.character.escape.bats
      match: \\.
    - name: string.quoted.single.bats
      begin: ''''
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.bats}
      end: ''''
      endCaptures:
        '0': {name: punctuation.definition.string.end.bats}
    - name: string.quoted.double.bats
      begin: \$?"
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.bats}
      end: '"'
      endCaptures:
        '0': {name: punctuation.definition.string.end.bats}
      patterns:
      - name: constant.character.escape.bats
        match: \\[\$`"\\\n]
      - include: '#variable'
      - include: '#interpolation'
    - name: string.quoted.single.dollar.bats
      begin: \$'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.bats}
      end: ''''
      endCaptures:
        '0': {name: punctuation.definition.string.end.bats}
      patterns:
      - name: constant.character.escape.ansi-c.bats
        match: \\(a|b|e|f|n|r|t|v|\\|')
      - name: constant.character.escape.octal.bats
        match: \\[0-9]{3}
      - name: constant.character.escape.hex.bats
        match: \\x[0-9a-fA-F]{2}
      - name: constant.character.escape.control-char.bats
        match: \\c.

  support:
    patterns:
    - name: support.function.builtin.bats
      match: (?<=^|\s)(?::|\.)(?=\s|;|&|$)
    - name: support.function.builtin.bats
      match: (?<![-/])\b(?:alias|bg|bind|builtin|caller|cd|command|compgen|complete|dirs|disown|echo|enable|eval|exec|exit|false|fc|fg|getopts|hash|help|history|jobs|kill|let|logout|popd|printf|pushd|pwd|read|readonly|set|shift|shopt|source|suspend|test|times|trap|true|type|ulimit|umask|unalias|unset|wait)\b

  variable:
    patterns:
    - name: variable.other.special.bats
      match: (\$)[-*@#?$!0_]
      captures:
        '1': {name: punctuation.definition.variable.bats}
    - name: variable.other.positional.bats
      match: (\$)[1-9]
      captures:
        '1': {name: punctuation.definition.variable.bats}
    - name: variable.other.normal.bats
      match: (\$)[a-zA-Z_][a-zA-Z0-9_]*
      captures:
        '1': {name: punctuation.definition.variable.bats}
    - name: variable.other.bracket.bats
      begin: \$\{
      end: \}
      captures:
        '0': {name: punctuation.definition.variable.bats}
      patterns:
      - name: keyword.operator.expansion.bats
        match: '!|:[-=?]?|\*|@|#{1,2}|%{1,2}|/'
      - match: (\[)([^\]]+)(\])
        captures:
          '1': {name: punctuation.section.array.bats}
          '3': {name: punctuation.section.array.bats}
foldingStartMarker: \b(if|case)\b|(\{|\b(do)\b)$
foldingStopMarker: ^\s*(\}|(done|fi|esac)\b)
keyEquivalent: ^~B
